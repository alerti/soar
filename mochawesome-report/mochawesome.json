{
  "stats": {
    "suites": 8,
    "tests": 54,
    "passes": 54,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-15T19:01:44.077Z",
    "end": "2025-01-15T19:02:15.085Z",
    "duration": 31008,
    "testsRegistered": 54,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0cbdfa42-6157-49c3-87ab-ab6d9bdb081a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "412d95e5-72e8-45bc-ad47-4335de4c5b8f",
          "title": "Classroom Entity Integration Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/integration/classroom.integration.test.js",
          "file": "/tests/integration/classroom.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Classroom Entity Integration Tests\"",
              "fullTitle": "Classroom Entity Integration Tests \"before all\" hook in \"Classroom Entity Integration Tests\"",
              "timedOut": false,
              "duration": 4678,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear all collections before starting tests\nawait Promise.all([\n    userModel.deleteMany({}),\n    schoolModel.deleteMany({}),\n    classroomModel.deleteMany({})\n]);\n\n// Create a superadmin user and authenticate\nconst superadmin = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst superadminRes = await request(app).post('/api/users/register').send(superadmin);\nsuperadminId = superadminRes.body.user._id;\n\nconst superadminAuth = await request(app).post('/api/users/login').send({\n    email: superadmin.email,\n    password: superadmin.password\n});\nsuperadminToken = superadminAuth.body.token;\n\n// Create a schooladmin user and authenticate\nconst schooladmin = {\n    username: 'School Admin',\n    email: 'schooladmin@example.com',\n    password: 'password123',\n    role: 'schooladmin'\n};\nconst schooladminRes = await request(app).post('/api/users/register').send(schooladmin);\nschooladminId = schooladminRes.body.user._id;\n\nconst schooladminAuth = await request(app).post('/api/users/login').send({\n    email: schooladmin.email,\n    password: schooladmin.password\n});\nschooladminToken = schooladminAuth.body.token;\n\n// Create a school using the superadmin token\nconst school = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n  .post('/api/schools')\n  .set('Authorization', `Bearer ${superadminToken}`)\n  .send(school);\nschoolId = schoolRes.body._id;",
              "err": {},
              "uuid": "680cd0a0-0314-4336-bf9d-f505640cd872",
              "parentUUID": "412d95e5-72e8-45bc-ad47-4335de4c5b8f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Classroom Entity Integration Tests\"",
              "fullTitle": "Classroom Entity Integration Tests \"after all\" hook in \"Classroom Entity Integration Tests\"",
              "timedOut": false,
              "duration": 203,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear all collections after tests\nawait Promise.all([\n    userModel.deleteMany({}),\n    schoolModel.deleteMany({}),\n    classroomModel.deleteMany({})\n]);",
              "err": {},
              "uuid": "687774ff-9686-4e18-a0e8-54d40941b716",
              "parentUUID": "412d95e5-72e8-45bc-ad47-4335de4c5b8f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow schooladmin to create a classroom without a school",
              "fullTitle": "Classroom Entity Integration Tests should not allow schooladmin to create a classroom without a school",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const classroom = {\n    name: 'Test Classroom',\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\n\nconst res = await request(app)\n  .post('/api/classrooms')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(classroom);\n\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "6f266b25-5bbd-4abe-8a2e-fa60eb824a75",
              "parentUUID": "412d95e5-72e8-45bc-ad47-4335de4c5b8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update schooladmin user to associate with a school",
              "fullTitle": "Classroom Entity Integration Tests should update schooladmin user to associate with a school",
              "timedOut": false,
              "duration": 614,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const update = { school: schoolId };\n\nconst res = await request(app)\n  .put(`/api/users/${schooladminId}`)\n  .set('Authorization', `Bearer ${superadminToken}`)\n  .send(update);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.school).to.equal(schoolId);",
              "err": {},
              "uuid": "a0e663e4-7215-4866-aa33-f05427ff6f2f",
              "parentUUID": "412d95e5-72e8-45bc-ad47-4335de4c5b8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow schooladmin to create a new classroom",
              "fullTitle": "Classroom Entity Integration Tests should allow schooladmin to create a new classroom",
              "timedOut": false,
              "duration": 613,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const classroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\n\nconst res = await request(app)\n  .post('/api/classrooms')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(classroom);\n\nclassroomId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body.name).to.equal(classroom.name);",
              "err": {},
              "uuid": "44b389fd-6d4e-44dc-acd2-22f6a854a761",
              "parentUUID": "412d95e5-72e8-45bc-ad47-4335de4c5b8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a classroom capacity",
              "fullTitle": "Classroom Entity Integration Tests should update a classroom capacity",
              "timedOut": false,
              "duration": 826,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const update = { capacity: 35 };\n\nconst res = await request(app)\n  .put(`/api/classrooms/${classroomId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(update);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.capacity).to.equal(update.capacity);",
              "err": {},
              "uuid": "ee8ff0af-819d-4d69-97d7-7b5578c3e0f7",
              "parentUUID": "412d95e5-72e8-45bc-ad47-4335de4c5b8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a classroom by ID",
              "fullTitle": "Classroom Entity Integration Tests should retrieve a classroom by ID",
              "timedOut": false,
              "duration": 606,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .get(`/api/classrooms/${classroomId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.name).to.equal('Test Classroom');\nexpect(res.body.capacity).to.equal(35);",
              "err": {},
              "uuid": "d6948691-723c-4fde-bcb5-58e96a4014dc",
              "parentUUID": "412d95e5-72e8-45bc-ad47-4335de4c5b8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a classroom",
              "fullTitle": "Classroom Entity Integration Tests should delete a classroom",
              "timedOut": false,
              "duration": 816,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .delete(`/api/classrooms/${classroomId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`);\n\nexpect(res.status).to.equal(204);",
              "err": {},
              "uuid": "d638ae5f-d153-4a29-b048-25942e13872a",
              "parentUUID": "412d95e5-72e8-45bc-ad47-4335de4c5b8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to retrieve a deleted classroom",
              "fullTitle": "Classroom Entity Integration Tests should fail to retrieve a deleted classroom",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .get(`/api/classrooms/${classroomId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`);\n\nexpect(res.status).to.equal(404);",
              "err": {},
              "uuid": "974aa7d7-a144-43b8-be2c-e9d137662f75",
              "parentUUID": "412d95e5-72e8-45bc-ad47-4335de4c5b8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve all classrooms for a schooladmin",
              "fullTitle": "Classroom Entity Integration Tests should retrieve all classrooms for a schooladmin",
              "timedOut": false,
              "duration": 1216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const classroom1 = {\n    name: 'Classroom A',\n    school: schoolId,\n    capacity: 20,\n    resources: ['Desks']\n};\nconst classroom2 = {\n    name: 'Classroom B',\n    school: schoolId,\n    capacity: 40,\n    resources: ['Computers']\n};\n\nawait Promise.all([\n    request(app).post('/api/classrooms').set('Authorization', `Bearer ${schooladminToken}`).send(classroom1),\n    request(app).post('/api/classrooms').set('Authorization', `Bearer ${schooladminToken}`).send(classroom2)\n]);\n\nconst res = await request(app)\n  .get('/api/classrooms')\n  .set('Authorization', `Bearer ${schooladminToken}`);\n\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.be.at.least(2);",
              "err": {},
              "uuid": "3a122adf-fc7a-43dc-b1e0-d099bf04b273",
              "parentUUID": "412d95e5-72e8-45bc-ad47-4335de4c5b8f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6f266b25-5bbd-4abe-8a2e-fa60eb824a75",
            "a0e663e4-7215-4866-aa33-f05427ff6f2f",
            "44b389fd-6d4e-44dc-acd2-22f6a854a761",
            "ee8ff0af-819d-4d69-97d7-7b5578c3e0f7",
            "d6948691-723c-4fde-bcb5-58e96a4014dc",
            "d638ae5f-d153-4a29-b048-25942e13872a",
            "974aa7d7-a144-43b8-be2c-e9d137662f75",
            "3a122adf-fc7a-43dc-b1e0-d099bf04b273"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5297,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "bc7f40ba-af4c-4c7f-9812-8735c9c7dadb",
          "title": "School Entity Integration Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/integration/school.integration.test.js",
          "file": "/tests/integration/school.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"School Entity Integration Tests\"",
              "fullTitle": "School Entity Integration Tests \"before all\" hook in \"School Entity Integration Tests\"",
              "timedOut": false,
              "duration": 1004,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear the users and schools collections before each test\nawait userModel.deleteMany({});\nawait schoolModel.deleteMany({});\n// Create a superadmin user\nconst newUser = {\n    username: 'Super Admin',\n    email: 'superadmin@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst res = await request(app)\n    .post('/api/users/register')\n    .send(newUser);\nuserId = res.body.user._id;\n// Authenticate the superadmin user\nconst credentials = {\n    email: 'superadmin@example.com',\n    password: 'password123'\n};\nconst authRes = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\ntoken = authRes.body.token;",
              "err": {},
              "uuid": "4101f8df-d0e7-46da-944c-f24039f0e41b",
              "parentUUID": "bc7f40ba-af4c-4c7f-9812-8735c9c7dadb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new school",
              "fullTitle": "School Entity Integration Tests should create a new school",
              "timedOut": false,
              "duration": 490,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: userId\n};\nconst res = await request(app)\n    .post('/api/schools')\n    .set('Authorization', `Bearer ${token}`)\n    .send(newSchool);\nschoolId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newSchool.name);\nexpect(res.body.address).to.equal(newSchool.address);\nexpect(res.body.phone).to.equal(newSchool.phone);\nexpect(res.body.email).to.equal(newSchool.email);\nexpect(res.body.adminId).to.equal(newSchool.adminId);",
              "err": {},
              "uuid": "9b09a2f6-0642-4ed7-8655-ef03e6fa61aa",
              "parentUUID": "bc7f40ba-af4c-4c7f-9812-8735c9c7dadb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a school by ID",
              "fullTitle": "School Entity Integration Tests should get a school by ID",
              "timedOut": false,
              "duration": 613,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@example.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: userId\n};\n// Get the school by ID\nconst getRes = await request(app)\n    .get(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal(newSchool.name);\nexpect(getRes.body.address).to.equal(newSchool.address);\nexpect(getRes.body.phone).to.equal(newSchool.phone);\nexpect(getRes.body.email).to.equal(newSchool.email);\nexpect(getRes.body.admin._id).to.equal(userId);",
              "err": {},
              "uuid": "e00a30af-b459-46f4-8283-e09278224df3",
              "parentUUID": "bc7f40ba-af4c-4c7f-9812-8735c9c7dadb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a school",
              "fullTitle": "School Entity Integration Tests should update a school",
              "timedOut": false,
              "duration": 627,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Update the school's name\nconst updatedSchool = {\n    name: 'Updated School'\n};\nconst updateRes = await request(app)\n    .put(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(updatedSchool);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.name).to.equal(updatedSchool.name);",
              "err": {},
              "uuid": "db4cda96-c3f1-4388-b599-6ca0155af873",
              "parentUUID": "bc7f40ba-af4c-4c7f-9812-8735c9c7dadb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a school",
              "fullTitle": "School Entity Integration Tests should delete a school",
              "timedOut": false,
              "duration": 408,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Delete the school\nconst deleteRes = await request(app)\n    .delete(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${token}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "3782f2d3-ae60-44e0-af79-8a255b03c02d",
              "parentUUID": "bc7f40ba-af4c-4c7f-9812-8735c9c7dadb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all schools",
              "fullTitle": "School Entity Integration Tests should get all schools",
              "timedOut": false,
              "duration": 1425,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create multiple schools\nconst schools = [\n    {\n        name: 'School One',\n        address: 'Address One',\n        phone: '111-111-1111',\n        email: 'schoolone@example.com',\n        website: 'http://schoolone.com',\n        established: '1990-01-01',\n        admin: userId\n    },\n    {\n        name: 'School Two',\n        address: 'Address Two',\n        phone: '222-222-2222',\n        email: 'schooltwo@example.com',\n        website: 'http://schooltwo.com',\n        established: '1995-01-01',\n        admin: userId\n    }\n];\nfor (const school of schools) {\n    await request(app)\n        .post('/api/schools')\n        .set('Authorization', `Bearer ${token}`)\n        .send(school);\n}\n// Get all schools\nconst getAllRes = await request(app)\n    .get('/api/schools')\n    .set('Authorization', `Bearer ${token}`);\nexpect(getAllRes.status).to.equal(200);\nexpect(getAllRes.body).to.be.an('array');\nexpect(getAllRes.body.length).to.be.greaterThan(1);",
              "err": {},
              "uuid": "968c9419-f2d6-430b-ae2c-d60f4541c1b0",
              "parentUUID": "bc7f40ba-af4c-4c7f-9812-8735c9c7dadb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b09a2f6-0642-4ed7-8655-ef03e6fa61aa",
            "e00a30af-b459-46f4-8283-e09278224df3",
            "db4cda96-c3f1-4388-b599-6ca0155af873",
            "3782f2d3-ae60-44e0-af79-8a255b03c02d",
            "968c9419-f2d6-430b-ae2c-d60f4541c1b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3563,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dda61572-69bb-4969-a763-7b76efb05953",
          "title": "Student Entity Integration Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/integration/student.integration.test.js",
          "file": "/tests/integration/student.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Student Entity Integration Tests\"",
              "fullTitle": "Student Entity Integration Tests \"before all\" hook in \"Student Entity Integration Tests\"",
              "timedOut": false,
              "duration": 2939,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.time('Setup Time');\n\n// Clear collections concurrently\nawait Promise.all([\n    userModel.deleteMany({}),\n    schoolModel.deleteMany({}),\n    classroomModel.deleteMany({}),\n    studentModel.deleteMany({})\n]);\n\n// Create and authenticate superadmin\nconst superadmin = { username: 'Super Admin', email: 'superadmin@example.com', password: 'password123', role: 'superadmin' };\nconst { body: { user: { _id: superadminIdRes } } } = await request(app).post('/api/users/register').send(superadmin);\nsuperadminId = superadminIdRes;\n\nconst { body: { token: superadminTokenRes } } = await request(app).post('/api/users/login').send({ email: superadmin.email, password: superadmin.password });\nsuperadminToken = superadminTokenRes;\n\n// Create and authenticate schooladmin\nconst schooladmin = { username: 'School Admin', email: 'schooladmin@example.com', password: 'password123', role: 'schooladmin' };\nconst { body: { user: { _id: schooladminIdRes } } } = await request(app).post('/api/users/register').send(schooladmin);\nschooladminId = schooladminIdRes;\n\nconst { body: { token: schooladminTokenRes } } = await request(app).post('/api/users/login').send({ email: schooladmin.email, password: schooladmin.password });\nschooladminToken = schooladminTokenRes;\n\n// Create school\nconst school = { name: 'Test School', address: '123 Test St', phone: '123-456-7890', email: 'testschool@example.com', website: 'http://testschool.com', established: '2000-01-01', admin: superadminId };\nconst { body: { _id: schoolIdRes } } = await request(app).post('/api/schools').set('Authorization', `Bearer ${superadminToken}`).send(school);\nschoolId = schoolIdRes;\n\n// Assign school to schooladmin\nconst updateRes = await request(app).put(`/api/users/${schooladminId}`).set('Authorization', `Bearer ${superadminToken}`).send({ school: schoolId });\nexpect(updateRes.status).to.equal(200);\n\n// Create classroom\nconst classroom = { name: 'Test Classroom', school: schoolId, capacity: 1, resources: ['Projector', 'Whiteboard'] };\nconst { body: { _id: classroomIdRes } } = await request(app).post('/api/classrooms').set('Authorization', `Bearer ${schooladminToken}`).send(classroom);\nclassroomId = classroomIdRes;\n\nconsole.timeEnd('Setup Time');",
              "err": {},
              "uuid": "fff649eb-d6a3-46f7-90ad-8a52b8455030",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Student Entity Integration Tests\"",
              "fullTitle": "Student Entity Integration Tests \"after all\" hook in \"Student Entity Integration Tests\"",
              "timedOut": false,
              "duration": 215,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.time('Teardown Time');\n\n// Clear collections concurrently\nawait Promise.all([\n    userModel.deleteMany({}),\n    schoolModel.deleteMany({}),\n    classroomModel.deleteMany({}),\n    studentModel.deleteMany({})\n]);\n\nconsole.timeEnd('Teardown Time');",
              "err": {},
              "uuid": "26533f67-8abe-4b04-ae93-304809b0912b",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should fail to update a student with an invalid classroom",
              "fullTitle": "Student Entity Integration Tests should fail to update a student with an invalid classroom",
              "timedOut": false,
              "duration": 230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedStudent = {\n    classroom: 'invalidClassroomId'\n};\n\nconst updateRes = await request(app)\n  .put(`/api/students/${studentId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(updatedStudent);\n\nexpect(updateRes.status).to.equal(400);",
              "err": {},
              "uuid": "9dfda27f-0b22-4487-94b1-f8709d216f51",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update a student with access denied",
              "fullTitle": "Student Entity Integration Tests should fail to update a student with access denied",
              "timedOut": false,
              "duration": 1223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Another Test School',\n    address: '456 Another St',\n    phone: '987-654-3210',\n    email: 'anothertestschool@example.com',\n    website: 'http://anothertestschool.com',\n    established: '2005-01-01',\n    admin: superadminId\n};\n\nconst schoolRes = await request(app)\n  .post('/api/schools')\n  .set('Authorization', `Bearer ${superadminToken}`)\n  .send(newSchool);\n\nconst anotherSchoolId = schoolRes.body._id;\n\nconst newClassroom = {\n    name: 'Another Test Classroom',\n    school: anotherSchoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\n\nconst classroomRes = await request(app)\n  .post('/api/classrooms')\n  .set('Authorization', `Bearer ${superadminToken}`)\n  .send(newClassroom);\n\nconst anotherClassroomId = classroomRes.body._id;\n\nconst updatedStudent = {\n    classroom: anotherClassroomId\n};\n\nconst updateRes = await request(app)\n  .put(`/api/students/${studentId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(updatedStudent);\n\nexpect(updateRes.status).to.equal(400);",
              "err": {},
              "uuid": "e65651a3-31b0-4a70-8955-9c7a43088b2e",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update a student when classroom capacity is exceeded",
              "fullTitle": "Student Entity Integration Tests should fail to update a student when classroom capacity is exceeded",
              "timedOut": false,
              "duration": 1022,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom = {\n    name: 'Small Classroom',\n    school: schoolId,\n    capacity: 1,\n    resources: ['Projector']\n};\n\nconst classroomRes = await request(app)\n  .post('/api/classrooms')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(newClassroom);\n\nconst smallClassroomId = classroomRes.body._id;\n\nconst newStudent = {\n    name: 'Another Student',\n    age: 16,\n    classroom: smallClassroomId\n};\n\nawait request(app)\n  .post('/api/students')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(newStudent);\n\nconst updatedStudent = {\n    classroom: smallClassroomId\n};\n\nconst updateRes = await request(app)\n  .put(`/api/students/${studentId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(updatedStudent);\n\nexpect(updateRes.status).to.equal(400);",
              "err": {},
              "uuid": "a8448f01-43cd-45af-bae1-231459735b4c",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a student and assign it to the classroom",
              "fullTitle": "Student Entity Integration Tests should create a student and assign it to the classroom",
              "timedOut": false,
              "duration": 1032,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Test Student',\n    email: 'teststudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\n\nconst res = await request(app)\n  .post('/api/students')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(newStudent);\n\nstudentId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newStudent.name);\nexpect(res.body.email).to.equal(newStudent.email);\nexpect(res.body.classroom).to.equal(newStudent.classroom);\nexpect(res.body.age).to.equal(newStudent.age);\nexpect(res.body.address).to.equal(newStudent.address);",
              "err": {},
              "uuid": "ce9eabf0-8934-4f7d-93c2-a3aafb72fdf1",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create another student in the same classroom due to capacity",
              "fullTitle": "Student Entity Integration Tests should fail to create another student in the same classroom due to capacity",
              "timedOut": false,
              "duration": 811,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Another Student',\n    email: 'anotherstudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\n\nconst res = await request(app)\n  .post('/api/students')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(newStudent);\n\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "ab1d7f9e-b00c-4319-9c93-efde0c833bba",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update classroom capacity to 30",
              "fullTitle": "Student Entity Integration Tests should update classroom capacity to 30",
              "timedOut": false,
              "duration": 816,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedClassroom = {\n    capacity: 30\n};\n\nconst updateRes = await request(app)\n  .put(`/api/classrooms/${classroomId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(updatedClassroom);\n\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.capacity).to.equal(updatedClassroom.capacity);",
              "err": {},
              "uuid": "f6e3f7d6-fcb7-4834-9fbc-b21aa1a89c0e",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create another student and assign it to the classroom successfully",
              "fullTitle": "Student Entity Integration Tests should create another student and assign it to the classroom successfully",
              "timedOut": false,
              "duration": 1045,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Another Student',\n    email: 'anotherstudent@example.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\n\nconst res = await request(app)\n  .post('/api/students')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(newStudent);\n\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newStudent.name);\nexpect(res.body.email).to.equal(newStudent.email);\nexpect(res.body.classroom).to.equal(newStudent.classroom);\nexpect(res.body.age).to.equal(newStudent.age);\nexpect(res.body.address).to.equal(newStudent.address);",
              "err": {},
              "uuid": "fbe79ca0-7b78-45a9-a86a-893a1a8b20b2",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a student information",
              "fullTitle": "Student Entity Integration Tests should update a student information",
              "timedOut": false,
              "duration": 810,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedStudent = {\n    name: 'Updated Student'\n};\n\nconst updateRes = await request(app)\n  .put(`/api/students/${studentId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(updatedStudent);\n\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.name).to.equal(updatedStudent.name);",
              "err": {},
              "uuid": "45d7d252-5e03-4ae4-a175-1222a4a2a8f8",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a student by ID",
              "fullTitle": "Student Entity Integration Tests should get a student by ID",
              "timedOut": false,
              "duration": 615,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n  .get(`/api/students/${studentId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`);\n\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal('Updated Student');\nexpect(getRes.body.email).to.equal('teststudent@example.com');\nexpect(getRes.body.classroom._id).to.equal(classroomId);\nexpect(getRes.body.age).to.equal(20);\nexpect(getRes.body.address).to.equal('123 Test St');",
              "err": {},
              "uuid": "98df11e4-8e85-4f64-98a4-235f3ab44f57",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get students by classroom",
              "fullTitle": "Student Entity Integration Tests should get students by classroom",
              "timedOut": false,
              "duration": 1008,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n  .get(`/api/students/classrooms/${classroomId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`);\n\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1);\nexpect(getRes.body[0].classroom._id).to.equal(classroomId);",
              "err": {},
              "uuid": "889e886c-5875-4d46-95a9-82bf7d02e142",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all students",
              "fullTitle": "Student Entity Integration Tests should get all students",
              "timedOut": false,
              "duration": 809,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n  .get('/api/students')\n  .set('Authorization', `Bearer ${schooladminToken}`);\n\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1);\nexpect(getRes.body[0]).to.have.property('_id');\nexpect(getRes.body[0]).to.have.property('name');\nexpect(getRes.body[0]).to.have.property('email');\nexpect(getRes.body[0].classroom._id).to.equal(classroomId);",
              "err": {},
              "uuid": "be822c82-e765-402e-ba45-cacc0358cfdb",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a student",
              "fullTitle": "Student Entity Integration Tests should delete a student",
              "timedOut": false,
              "duration": 814,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n  .delete(`/api/students/${studentId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`);\n\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "08152956-66b8-4fd8-8f75-0aebf2cc2700",
              "parentUUID": "dda61572-69bb-4969-a763-7b76efb05953",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9dfda27f-0b22-4487-94b1-f8709d216f51",
            "e65651a3-31b0-4a70-8955-9c7a43088b2e",
            "a8448f01-43cd-45af-bae1-231459735b4c",
            "ce9eabf0-8934-4f7d-93c2-a3aafb72fdf1",
            "ab1d7f9e-b00c-4319-9c93-efde0c833bba",
            "f6e3f7d6-fcb7-4834-9fbc-b21aa1a89c0e",
            "fbe79ca0-7b78-45a9-a86a-893a1a8b20b2",
            "45d7d252-5e03-4ae4-a175-1222a4a2a8f8",
            "98df11e4-8e85-4f64-98a4-235f3ab44f57",
            "889e886c-5875-4d46-95a9-82bf7d02e142",
            "be822c82-e765-402e-ba45-cacc0358cfdb",
            "08152956-66b8-4fd8-8f75-0aebf2cc2700"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10235,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "88872927-b21e-4e8a-9bc4-d029b24bef7b",
          "title": "User Entity Integration Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/integration/user.integration.test.js",
          "file": "/tests/integration/user.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Entity Integration Tests\"",
              "fullTitle": "User Entity Integration Tests \"before all\" hook in \"User Entity Integration Tests\"",
              "timedOut": false,
              "duration": 199,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await userModel.deleteMany({});",
              "err": {},
              "uuid": "f1e640f1-a660-4478-93ba-fd193407c01e",
              "parentUUID": "88872927-b21e-4e8a-9bc4-d029b24bef7b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "User Entity Integration Tests should create a new user",
              "timedOut": false,
              "duration": 281,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n    username: 'Test User',\n    email: 'testuser@example.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst res = await request(app)\n    .post('/api/users/register')\n    .send(newUser);\n\nuserId = res.body.user._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('user');\nexpect(res.body.user.username).to.equal(newUser.username);\nexpect(res.body.user.email).to.equal(newUser.email);",
              "err": {},
              "uuid": "feaf753f-7fef-4f65-8374-11f92de8b19a",
              "parentUUID": "88872927-b21e-4e8a-9bc4-d029b24bef7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate a user",
              "fullTitle": "User Entity Integration Tests should authenticate a user",
              "timedOut": false,
              "duration": 259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = {\n    email: 'testuser@example.com',\n    password: 'password123'\n};\nconst res = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\ntoken = res.body.token;\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
              "err": {},
              "uuid": "dddf8849-d984-48a8-ad36-e6b00dcc9156",
              "parentUUID": "88872927-b21e-4e8a-9bc4-d029b24bef7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid credentials",
              "fullTitle": "User Entity Integration Tests should return 400 for invalid credentials",
              "timedOut": false,
              "duration": 265,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = {\n    email: 'testuser@example.com',\n    password: 'wrongpassword'\n};\nconst res = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "c5567058-d85b-4baa-912c-07a7c9f7c11c",
              "parentUUID": "88872927-b21e-4e8a-9bc4-d029b24bef7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "User Entity Integration Tests should update a user",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n    username: 'Updated User'\n};\nconst updateRes = await request(app)\n    .put(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(updatedUser);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.username).to.equal(updatedUser.username);",
              "err": {},
              "uuid": "b4a97c14-cf94-45c4-9c8b-536e5ba9ce9b",
              "parentUUID": "88872927-b21e-4e8a-9bc4-d029b24bef7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a user by ID",
              "fullTitle": "User Entity Integration Tests should get a user by ID",
              "timedOut": false,
              "duration": 406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`);\n    \nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.have.property('_id');\nexpect(getRes.body._id).to.equal(userId);\nexpect(getRes.body.username).to.equal('Updated User');\nexpect(getRes.body.email).to.equal('testuser@example.com');",
              "err": {},
              "uuid": "cd5aa206-dfd6-42c8-a908-ad3f6fd336d9",
              "parentUUID": "88872927-b21e-4e8a-9bc4-d029b24bef7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all users",
              "fullTitle": "User Entity Integration Tests should get all users",
              "timedOut": false,
              "duration": 402,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get('/api/users')\n    .set('Authorization', `Bearer ${token}`);\n    \nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1); \nexpect(getRes.body[0]).to.have.property('_id');\nexpect(getRes.body[0]).to.have.property('username');\nexpect(getRes.body[0]).to.have.property('email');",
              "err": {},
              "uuid": "5c146068-f86f-49f3-9e8e-073b5658c159",
              "parentUUID": "88872927-b21e-4e8a-9bc4-d029b24bef7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "User Entity Integration Tests should delete a user",
              "timedOut": false,
              "duration": 612,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`);\n\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "2d1d7771-57e0-4466-b7ca-5609d0d61fff",
              "parentUUID": "88872927-b21e-4e8a-9bc4-d029b24bef7b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "feaf753f-7fef-4f65-8374-11f92de8b19a",
            "dddf8849-d984-48a8-ad36-e6b00dcc9156",
            "c5567058-d85b-4baa-912c-07a7c9f7c11c",
            "b4a97c14-cf94-45c4-9c8b-536e5ba9ce9b",
            "cd5aa206-dfd6-42c8-a908-ad3f6fd336d9",
            "5c146068-f86f-49f3-9e8e-073b5658c159",
            "2d1d7771-57e0-4466-b7ca-5609d0d61fff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2632,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0a581682-b0a9-47fb-bfd4-45a314e1414d",
          "title": "Classroom Model Unit Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/unit/classroom.test.js",
          "file": "/tests/unit/classroom.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Classroom Model Unit Tests\"",
              "fullTitle": "Classroom Model Unit Tests \"before each\" hook in \"Classroom Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub = sinon.stub(classroomModel, 'findById');",
              "err": {},
              "uuid": "573f77d8-9bc3-4380-b42f-72313958d12a",
              "parentUUID": "0a581682-b0a9-47fb-bfd4-45a314e1414d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Classroom Model Unit Tests\"",
              "fullTitle": "Classroom Model Unit Tests \"after each\" hook in \"Classroom Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub.restore();",
              "err": {},
              "uuid": "4297186a-d462-4f47-b418-af18226f98be",
              "parentUUID": "0a581682-b0a9-47fb-bfd4-45a314e1414d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a classroom by ID",
              "fullTitle": "Classroom Model Unit Tests should find a classroom by ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Test Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nclassroomStub.resolves(mockClassroom);\nconst classroom = await classroomModel.findById('123');\nexpect(classroom).to.deep.equal(mockClassroom);",
              "err": {},
              "uuid": "52f3123d-2402-4b1d-94d1-3903e7e547ef",
              "parentUUID": "0a581682-b0a9-47fb-bfd4-45a314e1414d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if classroom not found",
              "fullTitle": "Classroom Model Unit Tests should return null if classroom not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub.resolves(null);\nconst classroom = await classroomModel.findById('123');\nexpect(classroom).to.be.null;",
              "err": {},
              "uuid": "5708b0f0-7f33-4b0b-a65c-d7c1ca7412a1",
              "parentUUID": "0a581682-b0a9-47fb-bfd4-45a314e1414d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new classroom",
              "fullTitle": "Classroom Model Unit Tests should create a new classroom",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Test Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nconst createStub = sinon.stub(classroomModel.prototype, 'save').resolves(mockClassroom);\nconst newClassroom = new classroomModel(mockClassroom);\nconst savedClassroom = await newClassroom.save();\nexpect(savedClassroom).to.deep.equal(mockClassroom);\ncreateStub.restore();",
              "err": {},
              "uuid": "41e3197a-bfa8-4eef-bfd0-cee00544e8f0",
              "parentUUID": "0a581682-b0a9-47fb-bfd4-45a314e1414d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a classroom",
              "fullTitle": "Classroom Model Unit Tests should update a classroom",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Updated Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nconst updateStub = sinon.stub(classroomModel, 'findByIdAndUpdate').resolves(mockClassroom);\nconst updatedClassroom = await classroomModel.findByIdAndUpdate('123', { name: 'Updated Classroom' }, { new: true });\nexpect(updatedClassroom).to.deep.equal(mockClassroom);\nupdateStub.restore();",
              "err": {},
              "uuid": "fa4fbd0d-f6b3-4b15-a1d0-29b5e8ebb02a",
              "parentUUID": "0a581682-b0a9-47fb-bfd4-45a314e1414d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a classroom",
              "fullTitle": "Classroom Model Unit Tests should delete a classroom",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(classroomModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedClassroom = await classroomModel.findByIdAndDelete('123');\nexpect(deletedClassroom).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "92d205c6-bfe7-4509-be0a-5b3571e7fff1",
              "parentUUID": "0a581682-b0a9-47fb-bfd4-45a314e1414d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all classrooms",
              "fullTitle": "Classroom Model Unit Tests should get all classrooms",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub = sinon.stub(classroomModel, 'find');\nconst mockClassrooms = [\n    { id: '123', name: 'Classroom 1', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] },\n    { id: '124', name: 'Classroom 2', school: '456', capacity: 25, resources: ['Projector'] }\n];\nclassroomStub.resolves(mockClassrooms);\nconst classrooms = await classroomModel.find();\nexpect(classrooms).to.deep.equal(mockClassrooms);",
              "err": {},
              "uuid": "5e4facf3-f5f7-4787-8d75-81049a84daea",
              "parentUUID": "0a581682-b0a9-47fb-bfd4-45a314e1414d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "52f3123d-2402-4b1d-94d1-3903e7e547ef",
            "5708b0f0-7f33-4b0b-a65c-d7c1ca7412a1",
            "41e3197a-bfa8-4eef-bfd0-cee00544e8f0",
            "fa4fbd0d-f6b3-4b15-a1d0-29b5e8ebb02a",
            "92d205c6-bfe7-4509-be0a-5b3571e7fff1",
            "5e4facf3-f5f7-4787-8d75-81049a84daea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "95ff558c-2d9a-4942-834d-08e58bcd158f",
          "title": "School Model Unit Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/unit/school.test.js",
          "file": "/tests/unit/school.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"School Model Unit Tests\"",
              "fullTitle": "School Model Unit Tests \"before each\" hook in \"School Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub = sinon.stub(schoolModel, 'findById');",
              "err": {},
              "uuid": "8b6f468c-74e0-437c-959c-0d5777de2c5b",
              "parentUUID": "95ff558c-2d9a-4942-834d-08e58bcd158f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"School Model Unit Tests\"",
              "fullTitle": "School Model Unit Tests \"after each\" hook in \"School Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub.restore();",
              "err": {},
              "uuid": "1221b7e4-1ef8-45a1-afa3-8175046b92e4",
              "parentUUID": "95ff558c-2d9a-4942-834d-08e58bcd158f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a school by ID",
              "fullTitle": "School Model Unit Tests should find a school by ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Test School' };\nschoolStub.resolves(mockSchool);\nconst school = await schoolModel.findById('123');\nexpect(school).to.deep.equal(mockSchool);",
              "err": {},
              "uuid": "5668fd47-9241-42b1-88d0-ce299ac5ace5",
              "parentUUID": "95ff558c-2d9a-4942-834d-08e58bcd158f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if school not found",
              "fullTitle": "School Model Unit Tests should return null if school not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub.resolves(null);\nconst school = await schoolModel.findById('123');\nexpect(school).to.be.null;",
              "err": {},
              "uuid": "da715971-d7aa-4e3f-a446-f01575f29e9a",
              "parentUUID": "95ff558c-2d9a-4942-834d-08e58bcd158f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new school",
              "fullTitle": "School Model Unit Tests should create a new school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Test School' };\nconst createStub = sinon.stub(schoolModel.prototype, 'save').resolves(mockSchool);\nconst newSchool = new schoolModel(mockSchool);\nconst savedSchool = await newSchool.save();\nexpect(savedSchool).to.deep.equal(mockSchool);\ncreateStub.restore();",
              "err": {},
              "uuid": "880b0c0e-917a-4ada-be58-a44f2d69aa3f",
              "parentUUID": "95ff558c-2d9a-4942-834d-08e58bcd158f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a school",
              "fullTitle": "School Model Unit Tests should update a school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Updated School' };\nconst updateStub = sinon.stub(schoolModel, 'findByIdAndUpdate').resolves(mockSchool);\nconst updatedSchool = await schoolModel.findByIdAndUpdate('123', { name: 'Updated School' }, { new: true });\nexpect(updatedSchool).to.deep.equal(mockSchool);\nupdateStub.restore();",
              "err": {},
              "uuid": "be2fb098-95c5-464e-82dc-dfca3a33a6d6",
              "parentUUID": "95ff558c-2d9a-4942-834d-08e58bcd158f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a school",
              "fullTitle": "School Model Unit Tests should delete a school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(schoolModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedSchool = await schoolModel.findByIdAndDelete('123');\nexpect(deletedSchool).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "a6b4154c-504e-443b-85fd-85f19391966f",
              "parentUUID": "95ff558c-2d9a-4942-834d-08e58bcd158f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5668fd47-9241-42b1-88d0-ce299ac5ace5",
            "da715971-d7aa-4e3f-a446-f01575f29e9a",
            "880b0c0e-917a-4ada-be58-a44f2d69aa3f",
            "be2fb098-95c5-464e-82dc-dfca3a33a6d6",
            "a6b4154c-504e-443b-85fd-85f19391966f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ce17d759-54ed-4a9d-941e-b3d7e3693434",
          "title": "Student Model Unit Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/unit/student.test.js",
          "file": "/tests/unit/student.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Student Model Unit Tests\"",
              "fullTitle": "Student Model Unit Tests \"before each\" hook in \"Student Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub = sinon.stub(studentModel, 'findById');",
              "err": {},
              "uuid": "2ff5f8ad-1297-44f6-830b-f4010f2b316f",
              "parentUUID": "ce17d759-54ed-4a9d-941e-b3d7e3693434",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Student Model Unit Tests\"",
              "fullTitle": "Student Model Unit Tests \"after each\" hook in \"Student Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub.restore();",
              "err": {},
              "uuid": "b734a273-7826-4006-b478-16109a0c8159",
              "parentUUID": "ce17d759-54ed-4a9d-941e-b3d7e3693434",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a student by ID",
              "fullTitle": "Student Model Unit Tests should find a student by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Test Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nstudentStub.resolves(mockStudent);\nconst student = await studentModel.findById('123');\nexpect(student).to.deep.equal(mockStudent);",
              "err": {},
              "uuid": "cca7b6d0-23ec-429e-9e77-0fcfeed79553",
              "parentUUID": "ce17d759-54ed-4a9d-941e-b3d7e3693434",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if student not found",
              "fullTitle": "Student Model Unit Tests should return null if student not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub.resolves(null);\nconst student = await studentModel.findById('123');\nexpect(student).to.be.null;",
              "err": {},
              "uuid": "c5ce7cf7-afc8-43d2-b75d-683abffba1f8",
              "parentUUID": "ce17d759-54ed-4a9d-941e-b3d7e3693434",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new student",
              "fullTitle": "Student Model Unit Tests should create a new student",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Test Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nconst createStub = sinon.stub(studentModel.prototype, 'save').resolves(mockStudent);\nconst newStudent = new studentModel(mockStudent);\nconst savedStudent = await newStudent.save();\nexpect(savedStudent).to.deep.equal(mockStudent);\ncreateStub.restore();",
              "err": {},
              "uuid": "53ccb5a3-515d-48d4-8536-d6c1437cb13b",
              "parentUUID": "ce17d759-54ed-4a9d-941e-b3d7e3693434",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a student",
              "fullTitle": "Student Model Unit Tests should update a student",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Updated Student', email: 'teststudent@example.com', classroom: '456', age: 20, address: '123 Test St' };\nconst updateStub = sinon.stub(studentModel, 'findByIdAndUpdate').resolves(mockStudent);\nconst updatedStudent = await studentModel.findByIdAndUpdate('123', { name: 'Updated Student' }, { new: true });\nexpect(updatedStudent).to.deep.equal(mockStudent);\nupdateStub.restore();",
              "err": {},
              "uuid": "4b42f74b-7394-4dbb-aee0-50c7431348ba",
              "parentUUID": "ce17d759-54ed-4a9d-941e-b3d7e3693434",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a student",
              "fullTitle": "Student Model Unit Tests should delete a student",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(studentModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedStudent = await studentModel.findByIdAndDelete('123');\nexpect(deletedStudent).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "1e0620fa-d254-453e-ac46-b5a07fba1d6d",
              "parentUUID": "ce17d759-54ed-4a9d-941e-b3d7e3693434",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cca7b6d0-23ec-429e-9e77-0fcfeed79553",
            "c5ce7cf7-afc8-43d2-b75d-683abffba1f8",
            "53ccb5a3-515d-48d4-8536-d6c1437cb13b",
            "4b42f74b-7394-4dbb-aee0-50c7431348ba",
            "1e0620fa-d254-453e-ac46-b5a07fba1d6d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "be381b8c-8f23-4d42-90dc-061ad7ae2919",
          "title": "User Model Unit Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/unit/user.test.js",
          "file": "/tests/unit/user.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Model Unit Tests\"",
              "fullTitle": "User Model Unit Tests \"before each\" hook in \"User Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub = sinon.stub(userModel, 'findById');",
              "err": {},
              "uuid": "14784428-1c41-4e39-80d3-2b20a9daafd4",
              "parentUUID": "be381b8c-8f23-4d42-90dc-061ad7ae2919",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Model Unit Tests\"",
              "fullTitle": "User Model Unit Tests \"after each\" hook in \"User Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub.restore();",
              "err": {},
              "uuid": "3a0fe2c8-67a1-4c42-ad77-b4f187d83cb2",
              "parentUUID": "be381b8c-8f23-4d42-90dc-061ad7ae2919",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a user by ID",
              "fullTitle": "User Model Unit Tests should find a user by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User' };\nuserStub.resolves(mockUser);\nconst user = await userModel.findById('123');\nexpect(user).to.deep.equal(mockUser);",
              "err": {},
              "uuid": "7e92bead-3a27-433b-933d-c0065f78d142",
              "parentUUID": "be381b8c-8f23-4d42-90dc-061ad7ae2919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if user not found",
              "fullTitle": "User Model Unit Tests should return null if user not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub.resolves(null);\nconst user = await userModel.findById('123');\nexpect(user).to.be.null;",
              "err": {},
              "uuid": "b5f93580-918c-42f1-93b1-b13582b0b96e",
              "parentUUID": "be381b8c-8f23-4d42-90dc-061ad7ae2919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user",
              "fullTitle": "User Model Unit Tests should create a new user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User', email: 'testuser@example.com', password: 'password123' };\nconst createStub = sinon.stub(userModel.prototype, 'save').resolves(mockUser);\nconst newUser = new userModel(mockUser);\nconst savedUser = await newUser.save();\nexpect(savedUser).to.deep.equal(mockUser);\ncreateStub.restore();",
              "err": {},
              "uuid": "3f484be5-63b9-45a1-80c2-8671fa4c4c7e",
              "parentUUID": "be381b8c-8f23-4d42-90dc-061ad7ae2919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find a user by email",
              "fullTitle": "User Model Unit Tests should find a user by email",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User', email: 'testuser@example.com' };\nconst findStub = sinon.stub(userModel, 'findOne').resolves(mockUser);\nconst user = await userModel.findOne({ email: 'testuser@example.com' });\nexpect(user).to.deep.equal(mockUser);\nfindStub.restore();",
              "err": {},
              "uuid": "d1afb96d-294b-4774-b2fd-5c0835bc63e8",
              "parentUUID": "be381b8c-8f23-4d42-90dc-061ad7ae2919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "User Model Unit Tests should update a user",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Updated User', email: 'testuser@example.com' };\nconst updateStub = sinon.stub(userModel, 'findByIdAndUpdate').resolves(mockUser);\nconst updatedUser = await userModel.findByIdAndUpdate('123', { name: 'Updated User' }, { new: true });\nexpect(updatedUser).to.deep.equal(mockUser);\nupdateStub.restore();",
              "err": {},
              "uuid": "eb4ead84-298a-4480-aff2-13a6dd033564",
              "parentUUID": "be381b8c-8f23-4d42-90dc-061ad7ae2919",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "User Model Unit Tests should delete a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(userModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedUser = await userModel.findByIdAndDelete('123');\nexpect(deletedUser).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "e00259f0-7c79-4a95-9ed1-440e8dd5b33c",
              "parentUUID": "be381b8c-8f23-4d42-90dc-061ad7ae2919",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e92bead-3a27-433b-933d-c0065f78d142",
            "b5f93580-918c-42f1-93b1-b13582b0b96e",
            "3f484be5-63b9-45a1-80c2-8671fa4c4c7e",
            "d1afb96d-294b-4774-b2fd-5c0835bc63e8",
            "eb4ead84-298a-4480-aff2-13a6dd033564",
            "e00259f0-7c79-4a95-9ed1-440e8dd5b33c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}