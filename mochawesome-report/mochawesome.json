{
  "stats": {
    "suites": 8,
    "tests": 53,
    "passes": 53,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-15T20:20:12.649Z",
    "end": "2025-01-15T20:20:44.037Z",
    "duration": 31388,
    "testsRegistered": 53,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a9a393bb-4930-4ecd-9668-c7af0c82f8f1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bc4e0f79-9e4e-45a4-92b2-127572288630",
          "title": "Classroom Entity Integration Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/integration/classroom.integration.test.js",
          "file": "/tests/integration/classroom.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Classroom Entity Integration Tests\"",
              "fullTitle": "Classroom Entity Integration Tests \"before all\" hook in \"Classroom Entity Integration Tests\"",
              "timedOut": false,
              "duration": 4777,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear all collections before starting tests\nawait Promise.all([\n    userModel.deleteMany({}),\n    schoolModel.deleteMany({}),\n    classroomModel.deleteMany({})\n]);\n\n// Create a superadmin user and authenticate\nconst superadmin = {\n    username: 'Super Admin',\n    email: 'superadmin@soartest.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst superadminRes = await request(app).post('/api/users/register').send(superadmin);\nsuperadminId = superadminRes.body.user._id;\n\nconst superadminAuth = await request(app).post('/api/users/login').send({\n    email: superadmin.email,\n    password: superadmin.password\n});\nsuperadminToken = superadminAuth.body.token;\n\n// Create a schooladmin user and authenticate\nconst schooladmin = {\n    username: 'School Admin',\n    email: 'schooladmin@soartest.com',\n    password: 'password123',\n    role: 'schooladmin'\n};\nconst schooladminRes = await request(app).post('/api/users/register').send(schooladmin);\nschooladminId = schooladminRes.body.user._id;\n\nconst schooladminAuth = await request(app).post('/api/users/login').send({\n    email: schooladmin.email,\n    password: schooladmin.password\n});\nschooladminToken = schooladminAuth.body.token;\n\n// Create a school using the superadmin token\nconst school = {\n    name: 'Test School',\n    address: '123 Test St',\n    phone: '123-456-7890',\n    email: 'testschool@soartest.com',\n    website: 'http://testschool.com',\n    established: '2000-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n  .post('/api/schools')\n  .set('Authorization', `Bearer ${superadminToken}`)\n  .send(school);\nschoolId = schoolRes.body._id;",
              "err": {},
              "uuid": "41fee6cb-301a-4fc7-9b8f-4963db5a1a15",
              "parentUUID": "bc4e0f79-9e4e-45a4-92b2-127572288630",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Classroom Entity Integration Tests\"",
              "fullTitle": "Classroom Entity Integration Tests \"after all\" hook in \"Classroom Entity Integration Tests\"",
              "timedOut": false,
              "duration": 205,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Clear all collections after tests\nawait Promise.all([\n    userModel.deleteMany({}),\n    schoolModel.deleteMany({}),\n    classroomModel.deleteMany({})\n]);",
              "err": {},
              "uuid": "8657fdea-fa98-4d4c-8d16-a88011b7b333",
              "parentUUID": "bc4e0f79-9e4e-45a4-92b2-127572288630",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow schooladmin to create a classroom without a school",
              "fullTitle": "Classroom Entity Integration Tests should not allow schooladmin to create a classroom without a school",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const classroom = {\n    name: 'Test Classroom',\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\n\nconst res = await request(app)\n  .post('/api/classrooms')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(classroom);\n\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "97eb2770-423b-4b8e-a1e2-75cce6fc75e3",
              "parentUUID": "bc4e0f79-9e4e-45a4-92b2-127572288630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update schooladmin user to associate with a school",
              "fullTitle": "Classroom Entity Integration Tests should update schooladmin user to associate with a school",
              "timedOut": false,
              "duration": 621,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const update = { school: schoolId };\n\nconst res = await request(app)\n  .put(`/api/users/${schooladminId}`)\n  .set('Authorization', `Bearer ${superadminToken}`)\n  .send(update);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.school).to.equal(schoolId);",
              "err": {},
              "uuid": "571b3a61-6c60-4c8f-a4bb-ee306ba5784d",
              "parentUUID": "bc4e0f79-9e4e-45a4-92b2-127572288630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow schooladmin to create a new classroom",
              "fullTitle": "Classroom Entity Integration Tests should allow schooladmin to create a new classroom",
              "timedOut": false,
              "duration": 615,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const classroom = {\n    name: 'Test Classroom',\n    school: schoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\n\nconst res = await request(app)\n  .post('/api/classrooms')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(classroom);\n\nclassroomId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body.name).to.equal(classroom.name);",
              "err": {},
              "uuid": "ed9699b3-6dbb-48aa-9eca-8c4100a1c13a",
              "parentUUID": "bc4e0f79-9e4e-45a4-92b2-127572288630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a classroom capacity",
              "fullTitle": "Classroom Entity Integration Tests should update a classroom capacity",
              "timedOut": false,
              "duration": 828,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const update = { capacity: 35 };\n\nconst res = await request(app)\n  .put(`/api/classrooms/${classroomId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(update);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.capacity).to.equal(update.capacity);",
              "err": {},
              "uuid": "c1ef0920-a85d-4472-b21a-86e20f4810c0",
              "parentUUID": "bc4e0f79-9e4e-45a4-92b2-127572288630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a classroom by ID",
              "fullTitle": "Classroom Entity Integration Tests should retrieve a classroom by ID",
              "timedOut": false,
              "duration": 603,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .get(`/api/classrooms/${classroomId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`);\n\nexpect(res.status).to.equal(200);\nexpect(res.body.name).to.equal('Test Classroom');\nexpect(res.body.capacity).to.equal(35);",
              "err": {},
              "uuid": "9153f099-05c8-4a2c-8e63-0214803d0e36",
              "parentUUID": "bc4e0f79-9e4e-45a4-92b2-127572288630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a classroom",
              "fullTitle": "Classroom Entity Integration Tests should delete a classroom",
              "timedOut": false,
              "duration": 825,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .delete(`/api/classrooms/${classroomId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`);\n\nexpect(res.status).to.equal(204);",
              "err": {},
              "uuid": "d0740f1f-c4c7-4a6f-8555-f87ae3ddff3e",
              "parentUUID": "bc4e0f79-9e4e-45a4-92b2-127572288630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to retrieve a deleted classroom",
              "fullTitle": "Classroom Entity Integration Tests should fail to retrieve a deleted classroom",
              "timedOut": false,
              "duration": 404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .get(`/api/classrooms/${classroomId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`);\n\nexpect(res.status).to.equal(404);",
              "err": {},
              "uuid": "37d512dd-9e35-46e4-b2fe-9825c8f49171",
              "parentUUID": "bc4e0f79-9e4e-45a4-92b2-127572288630",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve all classrooms for a schooladmin",
              "fullTitle": "Classroom Entity Integration Tests should retrieve all classrooms for a schooladmin",
              "timedOut": false,
              "duration": 1231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const classroom1 = {\n    name: 'Classroom A',\n    school: schoolId,\n    capacity: 20,\n    resources: ['Desks']\n};\nconst classroom2 = {\n    name: 'Classroom B',\n    school: schoolId,\n    capacity: 40,\n    resources: ['Computers']\n};\n\nawait Promise.all([\n    request(app).post('/api/classrooms').set('Authorization', `Bearer ${schooladminToken}`).send(classroom1),\n    request(app).post('/api/classrooms').set('Authorization', `Bearer ${schooladminToken}`).send(classroom2)\n]);\n\nconst res = await request(app)\n  .get('/api/classrooms')\n  .set('Authorization', `Bearer ${schooladminToken}`);\n\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.be.at.least(2);",
              "err": {},
              "uuid": "6ff00171-f7aa-4154-b72a-4c1dd2260c10",
              "parentUUID": "bc4e0f79-9e4e-45a4-92b2-127572288630",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "97eb2770-423b-4b8e-a1e2-75cce6fc75e3",
            "571b3a61-6c60-4c8f-a4bb-ee306ba5784d",
            "ed9699b3-6dbb-48aa-9eca-8c4100a1c13a",
            "c1ef0920-a85d-4472-b21a-86e20f4810c0",
            "9153f099-05c8-4a2c-8e63-0214803d0e36",
            "d0740f1f-c4c7-4a6f-8555-f87ae3ddff3e",
            "37d512dd-9e35-46e4-b2fe-9825c8f49171",
            "6ff00171-f7aa-4154-b72a-4c1dd2260c10"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5333,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3e3b79d5-59e2-4342-86c7-41bf2e3bebd0",
          "title": "School Entity Integration Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/integration/school.integration.test.js",
          "file": "/tests/integration/school.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"School Entity Integration Tests\"",
              "fullTitle": "School Entity Integration Tests \"before all\" hook in \"School Entity Integration Tests\"",
              "timedOut": false,
              "duration": 1602,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.time('Setup Time');\ntry {\n    // Clear collections\n    await Promise.all([\n        userModel.deleteMany({}),\n        schoolModel.deleteMany({})\n    ]);\n    // Create and authenticate superadmin\n    const superadmin = {\n        username: 'Super Admin',\n        email: 'superadmin@soartest.com',\n        password: 'password123',\n        role: 'superadmin'\n    };\n    const res = await request(app)\n        .post('/api/users/register')\n        .send(superadmin);\n    superadminId = res.body.user._id;\n    const authRes = await request(app)\n        .post('/api/users/login')\n        .send({ email: superadmin.email, password: superadmin.password });\n    superadminToken = authRes.body.token;\n    // Create schools\n    const schools = [\n        {\n            name: 'Test School A',\n            address: '123 Main St',\n            phone: '123-456-7890',\n            email: 'schoolA@soartest.com',\n            website: 'http://schoolA.com',\n            established: '2000-01-01',\n            admin: superadminId\n        },\n        {\n            name: 'Test School B',\n            address: '456 Elm St',\n            phone: '987-654-3210',\n            email: 'schoolB@soartest.com',\n            website: 'http://schoolB.com',\n            established: '2005-01-01',\n            admin: superadminId\n        }\n    ];\n    for (const school of schools) {\n        const schoolRes = await request(app)\n            .post('/api/schools')\n            .set('Authorization', `Bearer ${superadminToken}`)\n            .send(school);\n        schoolId = schoolRes.body._id; // Keep the last created school ID\n    }\n} catch (error) {\n    console.error('Error during setup:', error);\n} finally {\n    console.timeEnd('Setup Time');\n}",
              "err": {},
              "uuid": "3e17cde3-373a-43ee-9164-927ec3bc6a2a",
              "parentUUID": "3e3b79d5-59e2-4342-86c7-41bf2e3bebd0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"School Entity Integration Tests\"",
              "fullTitle": "School Entity Integration Tests \"after all\" hook in \"School Entity Integration Tests\"",
              "timedOut": false,
              "duration": 210,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.time('Teardown Time');\ntry {\n    // Clear collections\n    await Promise.all([\n        userModel.deleteMany({}),\n        schoolModel.deleteMany({})\n    ]);\n} catch (error) {\n    console.error('Error during teardown:', error);\n} finally {\n    console.timeEnd('Teardown Time');\n}",
              "err": {},
              "uuid": "a9ef84f4-7b7a-488d-a64b-517be70f6a61",
              "parentUUID": "3e3b79d5-59e2-4342-86c7-41bf2e3bebd0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get all schools",
              "fullTitle": "School Entity Integration Tests should get all schools",
              "timedOut": false,
              "duration": 606,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .get('/api/schools')\n    .set('Authorization', `Bearer ${superadminToken}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.be.at.least(2); // At least 2 schools should be returned\nconst schoolNames = res.body.map(school => school.name);\nexpect(schoolNames).to.include('Test School A');\nexpect(schoolNames).to.include('Test School B');",
              "err": {},
              "uuid": "884c54ab-41ee-4c3a-9f2c-dd9b88c47180",
              "parentUUID": "3e3b79d5-59e2-4342-86c7-41bf2e3bebd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a school by ID",
              "fullTitle": "School Entity Integration Tests should get a school by ID",
              "timedOut": false,
              "duration": 609,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .get(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${superadminToken}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('_id', schoolId);\nexpect(res.body).to.have.property('name');\nexpect(res.body).to.have.property('address');",
              "err": {},
              "uuid": "d5c828e5-30e0-4e1d-a99d-9e5f27bd2a19",
              "parentUUID": "3e3b79d5-59e2-4342-86c7-41bf2e3bebd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a school",
              "fullTitle": "School Entity Integration Tests should update a school",
              "timedOut": false,
              "duration": 615,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedSchool = {\n    name: 'Updated Test School',\n    address: '789 Updated St',\n    phone: '555-555-5555',\n    email: 'updatedschool@soartest.com',\n    website: 'http://updatedschool.com',\n    established: '2010-01-01'\n};\nconst res = await request(app)\n    .put(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${superadminToken}`)\n    .send(updatedSchool);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('name', updatedSchool.name);\nexpect(res.body).to.have.property('address', updatedSchool.address);",
              "err": {},
              "uuid": "a290833c-c33d-4a09-9f7e-ebccd66f704c",
              "parentUUID": "3e3b79d5-59e2-4342-86c7-41bf2e3bebd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a school",
              "fullTitle": "School Entity Integration Tests should delete a school",
              "timedOut": false,
              "duration": 824,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .delete(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${superadminToken}`);\nexpect(res.status).to.equal(204);\nconst getRes = await request(app)\n    .get(`/api/schools/${schoolId}`)\n    .set('Authorization', `Bearer ${superadminToken}`);\nexpect(getRes.status).to.equal(404);",
              "err": {},
              "uuid": "e9895ccf-ee44-4185-a981-54aee6f478f9",
              "parentUUID": "3e3b79d5-59e2-4342-86c7-41bf2e3bebd0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "884c54ab-41ee-4c3a-9f2c-dd9b88c47180",
            "d5c828e5-30e0-4e1d-a99d-9e5f27bd2a19",
            "a290833c-c33d-4a09-9f7e-ebccd66f704c",
            "e9895ccf-ee44-4185-a981-54aee6f478f9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2654,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
          "title": "Student Entity Integration Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/integration/student.integration.test.js",
          "file": "/tests/integration/student.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Student Entity Integration Tests\"",
              "fullTitle": "Student Entity Integration Tests \"before all\" hook in \"Student Entity Integration Tests\"",
              "timedOut": false,
              "duration": 2930,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.time('Setup Time');\n// Clear collections concurrently\nawait Promise.all([\n    userModel.deleteMany({}),\n    schoolModel.deleteMany({}),\n    classroomModel.deleteMany({}),\n    studentModel.deleteMany({})\n]);\n// Create and authenticate superadmin\nconst superadmin = { username: 'Super Admin', email: 'superadmin@soartest.com', password: 'password123', role: 'superadmin' };\nconst { body: { user: { _id: superadminIdRes } } } = await request(app).post('/api/users/register').send(superadmin);\nsuperadminId = superadminIdRes;\nconst { body: { token: superadminTokenRes } } = await request(app).post('/api/users/login').send({ email: superadmin.email, password: superadmin.password });\nsuperadminToken = superadminTokenRes;\n// Create and authenticate schooladmin\nconst schooladmin = { username: 'School Admin', email: 'schooladmin@soartest.com', password: 'password123', role: 'schooladmin' };\nconst { body: { user: { _id: schooladminIdRes } } } = await request(app).post('/api/users/register').send(schooladmin);\nschooladminId = schooladminIdRes;\nconst { body: { token: schooladminTokenRes } } = await request(app).post('/api/users/login').send({ email: schooladmin.email, password: schooladmin.password });\nschooladminToken = schooladminTokenRes;\n// Create school\nconst school = { name: 'Test School', address: '123 Test St', phone: '123-456-7890', email: 'testschool@soartest.com', website: 'http://testschool.com', established: '2000-01-01', admin: superadminId };\nconst { body: { _id: schoolIdRes } } = await request(app).post('/api/schools').set('Authorization', `Bearer ${superadminToken}`).send(school);\nschoolId = schoolIdRes;\n// Assign school to schooladmin\nconst updateRes = await request(app).put(`/api/users/${schooladminId}`).set('Authorization', `Bearer ${superadminToken}`).send({ school: schoolId });\nexpect(updateRes.status).to.equal(200);\n// Create classroom\nconst classroom = { name: 'Test Classroom', school: schoolId, capacity: 1, resources: ['Projector', 'Whiteboard'] };\nconst { body: { _id: classroomIdRes } } = await request(app).post('/api/classrooms').set('Authorization', `Bearer ${schooladminToken}`).send(classroom);\nclassroomId = classroomIdRes;\nconsole.timeEnd('Setup Time');",
              "err": {},
              "uuid": "b13f2526-1683-49ac-9afa-7ce01fed9866",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Student Entity Integration Tests\"",
              "fullTitle": "Student Entity Integration Tests \"after all\" hook in \"Student Entity Integration Tests\"",
              "timedOut": false,
              "duration": 210,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.time('Teardown Time');\n// Clear collections concurrently\nawait Promise.all([\n    userModel.deleteMany({}),\n    schoolModel.deleteMany({}),\n    classroomModel.deleteMany({}),\n    studentModel.deleteMany({})\n]);\nconsole.timeEnd('Teardown Time');",
              "err": {},
              "uuid": "026774bc-1943-4eb8-badd-ddb1ee50d268",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should fail to update a student with an invalid classroom",
              "fullTitle": "Student Entity Integration Tests should fail to update a student with an invalid classroom",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedStudent = {\n    classroom: 'invalidClassroomId'\n};\nconst updateRes = await request(app)\n  .put(`/api/students/${studentId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(updatedStudent);\nexpect(updateRes.status).to.equal(400);",
              "err": {},
              "uuid": "3bec5197-82c4-44e0-9445-46f03db94e5c",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update a student with access denied",
              "fullTitle": "Student Entity Integration Tests should fail to update a student with access denied",
              "timedOut": false,
              "duration": 1228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newSchool = {\n    name: 'Another Test School',\n    address: '456 Another St',\n    phone: '987-654-3210',\n    email: 'anothertestschool@soartest.com',\n    website: 'http://anothertestschool.com',\n    established: '2005-01-01',\n    admin: superadminId\n};\nconst schoolRes = await request(app)\n  .post('/api/schools')\n  .set('Authorization', `Bearer ${superadminToken}`)\n  .send(newSchool);\nconst anotherSchoolId = schoolRes.body._id;\nconst newClassroom = {\n    name: 'Another Test Classroom',\n    school: anotherSchoolId,\n    capacity: 30,\n    resources: ['Projector', 'Whiteboard']\n};\nconst classroomRes = await request(app)\n  .post('/api/classrooms')\n  .set('Authorization', `Bearer ${superadminToken}`)\n  .send(newClassroom);\nconst anotherClassroomId = classroomRes.body._id;\nconst updatedStudent = {\n    classroom: anotherClassroomId\n};\nconst updateRes = await request(app)\n  .put(`/api/students/${studentId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(updatedStudent);\nexpect(updateRes.status).to.equal(400);",
              "err": {},
              "uuid": "633114e3-f72e-46f1-84a0-90f96f1ec2d0",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update a student when classroom capacity is exceeded",
              "fullTitle": "Student Entity Integration Tests should fail to update a student when classroom capacity is exceeded",
              "timedOut": false,
              "duration": 1020,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newClassroom = {\n    name: 'Small Classroom',\n    school: schoolId,\n    capacity: 1,\n    resources: ['Projector']\n};\nconst classroomRes = await request(app)\n  .post('/api/classrooms')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(newClassroom);\nconst smallClassroomId = classroomRes.body._id;\nconst newStudent = {\n    name: 'Another Student',\n    age: 16,\n    classroom: smallClassroomId\n};\nawait request(app)\n  .post('/api/students')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(newStudent);\nconst updatedStudent = {\n    classroom: smallClassroomId\n};\nconst updateRes = await request(app)\n  .put(`/api/students/${studentId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(updatedStudent);\nexpect(updateRes.status).to.equal(400);",
              "err": {},
              "uuid": "c9c10f48-8f86-42d8-8220-d4dce4b962b4",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a student and assign it to the classroom",
              "fullTitle": "Student Entity Integration Tests should create a student and assign it to the classroom",
              "timedOut": false,
              "duration": 1415,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Test Student',\n    email: 'teststudent@soartest.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n  .post('/api/students')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(newStudent);\nstudentId = res.body._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newStudent.name);\nexpect(res.body.email).to.equal(newStudent.email);\nexpect(res.body.classroom).to.equal(newStudent.classroom);\nexpect(res.body.age).to.equal(newStudent.age);\nexpect(res.body.address).to.equal(newStudent.address);",
              "err": {},
              "uuid": "1fc8234d-3520-4195-a8c1-36d5f6f933ae",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create another student in the same classroom due to capacity",
              "fullTitle": "Student Entity Integration Tests should fail to create another student in the same classroom due to capacity",
              "timedOut": false,
              "duration": 808,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Another Student',\n    email: 'anotherstudent@soartest.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n  .post('/api/students')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(newStudent);\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "5776c09c-97ca-42f7-8a80-6ebac60ab33c",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update classroom capacity to 30",
              "fullTitle": "Student Entity Integration Tests should update classroom capacity to 30",
              "timedOut": false,
              "duration": 816,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedClassroom = {\n    capacity: 30\n};\nconst updateRes = await request(app)\n  .put(`/api/classrooms/${classroomId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(updatedClassroom);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.capacity).to.equal(updatedClassroom.capacity);",
              "err": {},
              "uuid": "26610bdd-d06e-4e25-8a39-01d3f74e3ee7",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create another student and assign it to the classroom successfully",
              "fullTitle": "Student Entity Integration Tests should create another student and assign it to the classroom successfully",
              "timedOut": false,
              "duration": 1008,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newStudent = {\n    name: 'Another Student',\n    email: 'anotherstudent@soartest.com',\n    classroom: classroomId,\n    age: 20,\n    address: '123 Test St'\n};\nconst res = await request(app)\n  .post('/api/students')\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(newStudent);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(newStudent.name);\nexpect(res.body.email).to.equal(newStudent.email);\nexpect(res.body.classroom).to.equal(newStudent.classroom);\nexpect(res.body.age).to.equal(newStudent.age);\nexpect(res.body.address).to.equal(newStudent.address);",
              "err": {},
              "uuid": "89813154-997a-4f51-9fd4-f6240bae00fe",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a student information",
              "fullTitle": "Student Entity Integration Tests should update a student information",
              "timedOut": false,
              "duration": 820,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedStudent = {\n    name: 'Updated Student'\n};\nconst updateRes = await request(app)\n  .put(`/api/students/${studentId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`)\n  .send(updatedStudent);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.name).to.equal(updatedStudent.name);",
              "err": {},
              "uuid": "8f97733d-ab19-4ccf-b4fc-876e2bfb65f6",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a student by ID",
              "fullTitle": "Student Entity Integration Tests should get a student by ID",
              "timedOut": false,
              "duration": 612,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n  .get(`/api/students/${studentId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body.name).to.equal('Updated Student');\nexpect(getRes.body.email).to.equal('teststudent@soartest.com');\nexpect(getRes.body.classroom._id).to.equal(classroomId);\nexpect(getRes.body.age).to.equal(20);\nexpect(getRes.body.address).to.equal('123 Test St');",
              "err": {},
              "uuid": "b7e564f2-8588-4cef-9871-ca99ac97902b",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get students by classroom",
              "fullTitle": "Student Entity Integration Tests should get students by classroom",
              "timedOut": false,
              "duration": 1010,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n  .get(`/api/students/classrooms/${classroomId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1);\nexpect(getRes.body[0].classroom._id).to.equal(classroomId);",
              "err": {},
              "uuid": "edf66e36-5e96-4581-a974-6301cb9d8181",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all students",
              "fullTitle": "Student Entity Integration Tests should get all students",
              "timedOut": false,
              "duration": 811,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n  .get('/api/students')\n  .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1);\nexpect(getRes.body[0]).to.have.property('_id');\nexpect(getRes.body[0]).to.have.property('name');\nexpect(getRes.body[0]).to.have.property('email');\nexpect(getRes.body[0].classroom._id).to.equal(classroomId);",
              "err": {},
              "uuid": "f734b8b4-6d19-4a5f-8d2b-4613935fcf0f",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a student",
              "fullTitle": "Student Entity Integration Tests should delete a student",
              "timedOut": false,
              "duration": 822,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n  .delete(`/api/students/${studentId}`)\n  .set('Authorization', `Bearer ${schooladminToken}`);\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "c617203c-1b32-410a-80ae-cd3a600fb916",
              "parentUUID": "d1eda30d-ba70-493e-a2e6-fc9a75a4a8ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3bec5197-82c4-44e0-9445-46f03db94e5c",
            "633114e3-f72e-46f1-84a0-90f96f1ec2d0",
            "c9c10f48-8f86-42d8-8220-d4dce4b962b4",
            "1fc8234d-3520-4195-a8c1-36d5f6f933ae",
            "5776c09c-97ca-42f7-8a80-6ebac60ab33c",
            "26610bdd-d06e-4e25-8a39-01d3f74e3ee7",
            "89813154-997a-4f51-9fd4-f6240bae00fe",
            "8f97733d-ab19-4ccf-b4fc-876e2bfb65f6",
            "b7e564f2-8588-4cef-9871-ca99ac97902b",
            "edf66e36-5e96-4581-a974-6301cb9d8181",
            "f734b8b4-6d19-4a5f-8d2b-4613935fcf0f",
            "c617203c-1b32-410a-80ae-cd3a600fb916"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10573,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "fbb973ee-0741-4a5d-adeb-61e28d9d27d7",
          "title": "User Entity Integration Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/integration/user.integration.test.js",
          "file": "/tests/integration/user.integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Entity Integration Tests\"",
              "fullTitle": "User Entity Integration Tests \"before all\" hook in \"User Entity Integration Tests\"",
              "timedOut": false,
              "duration": 198,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await userModel.deleteMany({});",
              "err": {},
              "uuid": "de646910-5a36-46d7-b1ea-7d55bae268b6",
              "parentUUID": "fbb973ee-0741-4a5d-adeb-61e28d9d27d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "User Entity Integration Tests should create a new user",
              "timedOut": false,
              "duration": 281,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n    username: 'Test User',\n    email: 'testuser@soartest.com',\n    password: 'password123',\n    role: 'superadmin'\n};\nconst res = await request(app)\n    .post('/api/users/register')\n    .send(newUser);\n\nuserId = res.body.user._id;\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('user');\nexpect(res.body.user.username).to.equal(newUser.username);\nexpect(res.body.user.email).to.equal(newUser.email);",
              "err": {},
              "uuid": "55ba446d-01a8-4fd7-a556-374251a75ffc",
              "parentUUID": "fbb973ee-0741-4a5d-adeb-61e28d9d27d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate a user",
              "fullTitle": "User Entity Integration Tests should authenticate a user",
              "timedOut": false,
              "duration": 284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = {\n    email: 'testuser@soartest.com',\n    password: 'password123'\n};\nconst res = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\ntoken = res.body.token;\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
              "err": {},
              "uuid": "95f7ddfe-73a5-402b-909d-efbbc26cf971",
              "parentUUID": "fbb973ee-0741-4a5d-adeb-61e28d9d27d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid credentials",
              "fullTitle": "User Entity Integration Tests should return 400 for invalid credentials",
              "timedOut": false,
              "duration": 267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = {\n    email: 'testuser@soartest.com',\n    password: 'wrongpassword'\n};\nconst res = await request(app)\n    .post('/api/users/login')\n    .send(credentials);\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "557cd8eb-270d-4891-b35d-7649dd176fa0",
              "parentUUID": "fbb973ee-0741-4a5d-adeb-61e28d9d27d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "User Entity Integration Tests should update a user",
              "timedOut": false,
              "duration": 406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n    username: 'Updated User'\n};\nconst updateRes = await request(app)\n    .put(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(updatedUser);\nexpect(updateRes.status).to.equal(200);\nexpect(updateRes.body.username).to.equal(updatedUser.username);",
              "err": {},
              "uuid": "33c67812-a6ec-407c-a4ee-c30c4295c194",
              "parentUUID": "fbb973ee-0741-4a5d-adeb-61e28d9d27d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a user by ID",
              "fullTitle": "User Entity Integration Tests should get a user by ID",
              "timedOut": false,
              "duration": 400,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`);\n    \nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.have.property('_id');\nexpect(getRes.body._id).to.equal(userId);\nexpect(getRes.body.username).to.equal('Updated User');\nexpect(getRes.body.email).to.equal('testuser@soartest.com');",
              "err": {},
              "uuid": "e2e9d8d0-4879-4ea3-8238-ad9be35f3827",
              "parentUUID": "fbb973ee-0741-4a5d-adeb-61e28d9d27d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all users",
              "fullTitle": "User Entity Integration Tests should get all users",
              "timedOut": false,
              "duration": 404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getRes = await request(app)\n    .get('/api/users')\n    .set('Authorization', `Bearer ${token}`);\n    \nexpect(getRes.status).to.equal(200);\nexpect(getRes.body).to.be.an('array');\nexpect(getRes.body.length).to.be.at.least(1); \nexpect(getRes.body[0]).to.have.property('_id');\nexpect(getRes.body[0]).to.have.property('username');\nexpect(getRes.body[0]).to.have.property('email');",
              "err": {},
              "uuid": "6dbb6340-8679-4382-a85d-e7556c768db3",
              "parentUUID": "fbb973ee-0741-4a5d-adeb-61e28d9d27d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "User Entity Integration Tests should delete a user",
              "timedOut": false,
              "duration": 611,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await request(app)\n    .delete(`/api/users/${userId}`)\n    .set('Authorization', `Bearer ${token}`);\n\nexpect(deleteRes.status).to.equal(204);",
              "err": {},
              "uuid": "0a0082e2-e952-4e6e-b8e2-fdbf9c43ae0c",
              "parentUUID": "fbb973ee-0741-4a5d-adeb-61e28d9d27d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "55ba446d-01a8-4fd7-a556-374251a75ffc",
            "95f7ddfe-73a5-402b-909d-efbbc26cf971",
            "557cd8eb-270d-4891-b35d-7649dd176fa0",
            "33c67812-a6ec-407c-a4ee-c30c4295c194",
            "e2e9d8d0-4879-4ea3-8238-ad9be35f3827",
            "6dbb6340-8679-4382-a85d-e7556c768db3",
            "0a0082e2-e952-4e6e-b8e2-fdbf9c43ae0c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2653,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c0943cc1-bd2a-4339-b3f8-36f0bed6389c",
          "title": "Classroom Model Unit Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/unit/classroom.test.js",
          "file": "/tests/unit/classroom.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Classroom Model Unit Tests\"",
              "fullTitle": "Classroom Model Unit Tests \"before each\" hook in \"Classroom Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub = sinon.stub(classroomModel, 'findById');",
              "err": {},
              "uuid": "31bd11f3-b919-4710-89e0-7bfa39eea23e",
              "parentUUID": "c0943cc1-bd2a-4339-b3f8-36f0bed6389c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Classroom Model Unit Tests\"",
              "fullTitle": "Classroom Model Unit Tests \"after each\" hook in \"Classroom Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub.restore();",
              "err": {},
              "uuid": "2f8a3878-ec8a-4dda-8d25-17c2461ab088",
              "parentUUID": "c0943cc1-bd2a-4339-b3f8-36f0bed6389c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a classroom by ID",
              "fullTitle": "Classroom Model Unit Tests should find a classroom by ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Test Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nclassroomStub.resolves(mockClassroom);\nconst classroom = await classroomModel.findById('123');\nexpect(classroom).to.deep.equal(mockClassroom);",
              "err": {},
              "uuid": "902b2431-d663-4b59-ab24-0d407ad7e410",
              "parentUUID": "c0943cc1-bd2a-4339-b3f8-36f0bed6389c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if classroom not found",
              "fullTitle": "Classroom Model Unit Tests should return null if classroom not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub.resolves(null);\nconst classroom = await classroomModel.findById('123');\nexpect(classroom).to.be.null;",
              "err": {},
              "uuid": "f4f96349-e48f-4f45-a48d-9e692debf0c0",
              "parentUUID": "c0943cc1-bd2a-4339-b3f8-36f0bed6389c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new classroom",
              "fullTitle": "Classroom Model Unit Tests should create a new classroom",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Test Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nconst createStub = sinon.stub(classroomModel.prototype, 'save').resolves(mockClassroom);\nconst newClassroom = new classroomModel(mockClassroom);\nconst savedClassroom = await newClassroom.save();\nexpect(savedClassroom).to.deep.equal(mockClassroom);\ncreateStub.restore();",
              "err": {},
              "uuid": "9057d01f-e941-4d97-b11a-72f31a267a7c",
              "parentUUID": "c0943cc1-bd2a-4339-b3f8-36f0bed6389c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a classroom",
              "fullTitle": "Classroom Model Unit Tests should update a classroom",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockClassroom = { id: '123', name: 'Updated Classroom', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] };\nconst updateStub = sinon.stub(classroomModel, 'findByIdAndUpdate').resolves(mockClassroom);\nconst updatedClassroom = await classroomModel.findByIdAndUpdate('123', { name: 'Updated Classroom' }, { new: true });\nexpect(updatedClassroom).to.deep.equal(mockClassroom);\nupdateStub.restore();",
              "err": {},
              "uuid": "27725116-c473-4fd6-a6e0-d4f913136c46",
              "parentUUID": "c0943cc1-bd2a-4339-b3f8-36f0bed6389c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a classroom",
              "fullTitle": "Classroom Model Unit Tests should delete a classroom",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(classroomModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedClassroom = await classroomModel.findByIdAndDelete('123');\nexpect(deletedClassroom).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "9c9e85a6-1948-447e-bc2b-e2d687c72524",
              "parentUUID": "c0943cc1-bd2a-4339-b3f8-36f0bed6389c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all classrooms",
              "fullTitle": "Classroom Model Unit Tests should get all classrooms",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "classroomStub = sinon.stub(classroomModel, 'find');\nconst mockClassrooms = [\n    { id: '123', name: 'Classroom 1', school: '456', capacity: 30, resources: ['Projector', 'Whiteboard'] },\n    { id: '124', name: 'Classroom 2', school: '456', capacity: 25, resources: ['Projector'] }\n];\nclassroomStub.resolves(mockClassrooms);\nconst classrooms = await classroomModel.find();\nexpect(classrooms).to.deep.equal(mockClassrooms);",
              "err": {},
              "uuid": "93961ffe-0441-4668-9585-fe8f8924842f",
              "parentUUID": "c0943cc1-bd2a-4339-b3f8-36f0bed6389c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "902b2431-d663-4b59-ab24-0d407ad7e410",
            "f4f96349-e48f-4f45-a48d-9e692debf0c0",
            "9057d01f-e941-4d97-b11a-72f31a267a7c",
            "27725116-c473-4fd6-a6e0-d4f913136c46",
            "9c9e85a6-1948-447e-bc2b-e2d687c72524",
            "93961ffe-0441-4668-9585-fe8f8924842f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "53f90c6b-e057-4b5a-b530-7eef7d6fcabe",
          "title": "School Model Unit Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/unit/school.test.js",
          "file": "/tests/unit/school.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"School Model Unit Tests\"",
              "fullTitle": "School Model Unit Tests \"before each\" hook in \"School Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub = sinon.stub(schoolModel, 'findById');",
              "err": {},
              "uuid": "2cfd22e4-af13-4a2f-8269-44299b9b60b7",
              "parentUUID": "53f90c6b-e057-4b5a-b530-7eef7d6fcabe",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"School Model Unit Tests\"",
              "fullTitle": "School Model Unit Tests \"after each\" hook in \"School Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub.restore();",
              "err": {},
              "uuid": "2c4a3311-6395-4004-9cdf-9e2ba7b73da5",
              "parentUUID": "53f90c6b-e057-4b5a-b530-7eef7d6fcabe",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a school by ID",
              "fullTitle": "School Model Unit Tests should find a school by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Test School' };\nschoolStub.resolves(mockSchool);\nconst school = await schoolModel.findById('123');\nexpect(school).to.deep.equal(mockSchool);",
              "err": {},
              "uuid": "a7399e16-c70c-43a1-9892-041ad52f93f6",
              "parentUUID": "53f90c6b-e057-4b5a-b530-7eef7d6fcabe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if school not found",
              "fullTitle": "School Model Unit Tests should return null if school not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "schoolStub.resolves(null);\nconst school = await schoolModel.findById('123');\nexpect(school).to.be.null;",
              "err": {},
              "uuid": "a5634647-c5ba-4ff5-b976-25ae1f421e17",
              "parentUUID": "53f90c6b-e057-4b5a-b530-7eef7d6fcabe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new school",
              "fullTitle": "School Model Unit Tests should create a new school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Test School' };\nconst createStub = sinon.stub(schoolModel.prototype, 'save').resolves(mockSchool);\nconst newSchool = new schoolModel(mockSchool);\nconst savedSchool = await newSchool.save();\nexpect(savedSchool).to.deep.equal(mockSchool);\ncreateStub.restore();",
              "err": {},
              "uuid": "84265141-efb7-4e9d-8456-a053d7913345",
              "parentUUID": "53f90c6b-e057-4b5a-b530-7eef7d6fcabe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a school",
              "fullTitle": "School Model Unit Tests should update a school",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockSchool = { id: '123', name: 'Updated School' };\nconst updateStub = sinon.stub(schoolModel, 'findByIdAndUpdate').resolves(mockSchool);\nconst updatedSchool = await schoolModel.findByIdAndUpdate('123', { name: 'Updated School' }, { new: true });\nexpect(updatedSchool).to.deep.equal(mockSchool);\nupdateStub.restore();",
              "err": {},
              "uuid": "ec9ae58a-05a4-498c-9f79-62937322c9f2",
              "parentUUID": "53f90c6b-e057-4b5a-b530-7eef7d6fcabe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a school",
              "fullTitle": "School Model Unit Tests should delete a school",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(schoolModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedSchool = await schoolModel.findByIdAndDelete('123');\nexpect(deletedSchool).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "eb6dd870-cf5d-46ec-95b9-691cc05c52cb",
              "parentUUID": "53f90c6b-e057-4b5a-b530-7eef7d6fcabe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7399e16-c70c-43a1-9892-041ad52f93f6",
            "a5634647-c5ba-4ff5-b976-25ae1f421e17",
            "84265141-efb7-4e9d-8456-a053d7913345",
            "ec9ae58a-05a4-498c-9f79-62937322c9f2",
            "eb6dd870-cf5d-46ec-95b9-691cc05c52cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bc09fce9-9ffe-42c3-8e19-6e59fcb6a2cd",
          "title": "Student Model Unit Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/unit/student.test.js",
          "file": "/tests/unit/student.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Student Model Unit Tests\"",
              "fullTitle": "Student Model Unit Tests \"before each\" hook in \"Student Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub = sinon.stub(studentModel, 'findById');",
              "err": {},
              "uuid": "2f6459c0-9538-464d-acb1-1ac5eaff2bde",
              "parentUUID": "bc09fce9-9ffe-42c3-8e19-6e59fcb6a2cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Student Model Unit Tests\"",
              "fullTitle": "Student Model Unit Tests \"after each\" hook in \"Student Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub.restore();",
              "err": {},
              "uuid": "9fbcfbad-e4bc-412d-b3ba-18feb5c6d38f",
              "parentUUID": "bc09fce9-9ffe-42c3-8e19-6e59fcb6a2cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a student by ID",
              "fullTitle": "Student Model Unit Tests should find a student by ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Test Student', email: 'teststudent@soartest.com', classroom: '456', age: 20, address: '123 Test St' };\nstudentStub.resolves(mockStudent);\nconst student = await studentModel.findById('123');\nexpect(student).to.deep.equal(mockStudent);",
              "err": {},
              "uuid": "c88eaa56-f8dc-4ef2-bad2-3add4baa61de",
              "parentUUID": "bc09fce9-9ffe-42c3-8e19-6e59fcb6a2cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if student not found",
              "fullTitle": "Student Model Unit Tests should return null if student not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentStub.resolves(null);\nconst student = await studentModel.findById('123');\nexpect(student).to.be.null;",
              "err": {},
              "uuid": "4e010218-050a-4422-b7ca-b164c93d79f0",
              "parentUUID": "bc09fce9-9ffe-42c3-8e19-6e59fcb6a2cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new student",
              "fullTitle": "Student Model Unit Tests should create a new student",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Test Student', email: 'teststudent@soartest.com', classroom: '456', age: 20, address: '123 Test St' };\nconst createStub = sinon.stub(studentModel.prototype, 'save').resolves(mockStudent);\nconst newStudent = new studentModel(mockStudent);\nconst savedStudent = await newStudent.save();\nexpect(savedStudent).to.deep.equal(mockStudent);\ncreateStub.restore();",
              "err": {},
              "uuid": "3466b73a-9069-451f-85ca-f6a8ae4dbe8c",
              "parentUUID": "bc09fce9-9ffe-42c3-8e19-6e59fcb6a2cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a student",
              "fullTitle": "Student Model Unit Tests should update a student",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockStudent = { id: '123', name: 'Updated Student', email: 'teststudent@soartest.com', classroom: '456', age: 20, address: '123 Test St' };\nconst updateStub = sinon.stub(studentModel, 'findByIdAndUpdate').resolves(mockStudent);\nconst updatedStudent = await studentModel.findByIdAndUpdate('123', { name: 'Updated Student' }, { new: true });\nexpect(updatedStudent).to.deep.equal(mockStudent);\nupdateStub.restore();",
              "err": {},
              "uuid": "aaf337a6-7564-4a43-8513-47175f066690",
              "parentUUID": "bc09fce9-9ffe-42c3-8e19-6e59fcb6a2cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a student",
              "fullTitle": "Student Model Unit Tests should delete a student",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(studentModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedStudent = await studentModel.findByIdAndDelete('123');\nexpect(deletedStudent).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "25b2a4cf-a260-46b4-82c3-6637d3211f94",
              "parentUUID": "bc09fce9-9ffe-42c3-8e19-6e59fcb6a2cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c88eaa56-f8dc-4ef2-bad2-3add4baa61de",
            "4e010218-050a-4422-b7ca-b164c93d79f0",
            "3466b73a-9069-451f-85ca-f6a8ae4dbe8c",
            "aaf337a6-7564-4a43-8513-47175f066690",
            "25b2a4cf-a260-46b4-82c3-6637d3211f94"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "82293b6c-044a-47b3-a175-a20aa5840f85",
          "title": "User Model Unit Tests",
          "fullFile": "/Volumes/Data/Webstorm/Soar-Backend-Developer-Technical-Challenge/tests/unit/user.test.js",
          "file": "/tests/unit/user.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Model Unit Tests\"",
              "fullTitle": "User Model Unit Tests \"before each\" hook in \"User Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub = sinon.stub(userModel, 'findById');",
              "err": {},
              "uuid": "5a612622-22e4-48d0-a78e-251012715b2c",
              "parentUUID": "82293b6c-044a-47b3-a175-a20aa5840f85",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Model Unit Tests\"",
              "fullTitle": "User Model Unit Tests \"after each\" hook in \"User Model Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub.restore();",
              "err": {},
              "uuid": "bf8669e7-9ae6-4447-bcdc-5be14fbb5b51",
              "parentUUID": "82293b6c-044a-47b3-a175-a20aa5840f85",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should find a user by ID",
              "fullTitle": "User Model Unit Tests should find a user by ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User' };\nuserStub.resolves(mockUser);\nconst user = await userModel.findById('123');\nexpect(user).to.deep.equal(mockUser);",
              "err": {},
              "uuid": "1fb66db1-4b3c-4376-a6d9-43ad2513ad95",
              "parentUUID": "82293b6c-044a-47b3-a175-a20aa5840f85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null if user not found",
              "fullTitle": "User Model Unit Tests should return null if user not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userStub.resolves(null);\nconst user = await userModel.findById('123');\nexpect(user).to.be.null;",
              "err": {},
              "uuid": "6d6aa4e7-7906-4f1e-8b81-73e1c7f774c9",
              "parentUUID": "82293b6c-044a-47b3-a175-a20aa5840f85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user",
              "fullTitle": "User Model Unit Tests should create a new user",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User', email: 'testuser@soartest.com', password: 'password123' };\nconst createStub = sinon.stub(userModel.prototype, 'save').resolves(mockUser);\nconst newUser = new userModel(mockUser);\nconst savedUser = await newUser.save();\nexpect(savedUser).to.deep.equal(mockUser);\ncreateStub.restore();",
              "err": {},
              "uuid": "37167125-ba6a-45e1-9c59-f4fc8579d6c0",
              "parentUUID": "82293b6c-044a-47b3-a175-a20aa5840f85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find a user by email",
              "fullTitle": "User Model Unit Tests should find a user by email",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Test User', email: 'testuser@soartest.com' };\nconst findStub = sinon.stub(userModel, 'findOne').resolves(mockUser);\nconst user = await userModel.findOne({ email: 'testuser@soartest.com' });\nexpect(user).to.deep.equal(mockUser);\nfindStub.restore();",
              "err": {},
              "uuid": "680aea6c-919f-47b1-afdb-0a13d96cc5ff",
              "parentUUID": "82293b6c-044a-47b3-a175-a20aa5840f85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user",
              "fullTitle": "User Model Unit Tests should update a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: '123', name: 'Updated User', email: 'testuser@soartest.com' };\nconst updateStub = sinon.stub(userModel, 'findByIdAndUpdate').resolves(mockUser);\nconst updatedUser = await userModel.findByIdAndUpdate('123', { name: 'Updated User' }, { new: true });\nexpect(updatedUser).to.deep.equal(mockUser);\nupdateStub.restore();",
              "err": {},
              "uuid": "9fb2e31b-bc2d-4c7c-bdf8-48424dc5a86a",
              "parentUUID": "82293b6c-044a-47b3-a175-a20aa5840f85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user",
              "fullTitle": "User Model Unit Tests should delete a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteStub = sinon.stub(userModel, 'findByIdAndDelete').resolves({ id: '123' });\nconst deletedUser = await userModel.findByIdAndDelete('123');\nexpect(deletedUser).to.deep.equal({ id: '123' });\ndeleteStub.restore();",
              "err": {},
              "uuid": "09b2dbac-509b-468e-b4df-4181da04388f",
              "parentUUID": "82293b6c-044a-47b3-a175-a20aa5840f85",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1fb66db1-4b3c-4376-a6d9-43ad2513ad95",
            "6d6aa4e7-7906-4f1e-8b81-73e1c7f774c9",
            "37167125-ba6a-45e1-9c59-f4fc8579d6c0",
            "680aea6c-919f-47b1-afdb-0a13d96cc5ff",
            "9fb2e31b-bc2d-4c7c-bdf8-48424dc5a86a",
            "09b2dbac-509b-468e-b4df-4181da04388f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
